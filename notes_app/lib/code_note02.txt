Easy    **  1.[email validation regex]
            _____Over State_____
            String p ="r^[a-zA-Z0-9.a-zA-Z0-9.!#\$%&'*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+";
            RegExp regExp = new RegExp(p);
            validator: (value) {
            if (value == "") {
            return "Please fill Email Fiels";
            } else if (!regExp.hasMatch(value!)) {
            return "Invalid Email Adresse";
            }
            return "";}
Medium  *** 2.[TextFormField Validation]
            final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
            ____State
            void validation() {final FormState? _form = _formKey.currentState;if (_form!.validate()) {print("yes");add root function} else {print("No")//add more fcts;}}
            call validation() with submit button 
            don't forget to add validation inside TextFormField()
            "TextFormField(
            validator: (value) {
            if (value == "") {
            return "Please fill Phone Number Fiels";
            } else if (value!.length < 8) {
            return "Phone number is too short";
            } else if (isNumber(value)) {
            return "Not a Number";
            }return "";},
            decoration: const InputDecoration(
            hintText: "Phone Number",
            hintStyle: TextStyle(color: Colors.black),
            prefixIcon: Icon(Icons.phone),
            border: OutlineInputBorder()),),"
            

Easy    *   3.[Is Number]
            bool isNumber(String value) {if (value == null) {return false;}return double.tryParse(value) != null;}
Easy    *   4.[Bottom Keyboard Resize]
            Scaffold => resizeToAvoidBottomInset: false,
            avoid insuffisant space when keyboard goes up
Medium  *** 4.[Call Back Function]
            onPress: () {validation();}, => in page where function defined
            final Function onPress; => defined from widget page
            onPressed: onPress as Function()?, => call it from widget page
Hard    ****5.[Firebase Auth/Firestore]
            com.company.appname => android\app\src\main\AndroidManifest.xml : package 
            app/build.gradle => add minSdkVersion 19 & multiDexEnabled true
            add this in main.dart=> void main() async {WidgetsFlutterBinding.ensureInitialized();await Firebase.initializeApp();runApp(const MyApp(),);}           add Scaffold key upper State => final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
            AndroidManifest.xml => <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            Main => child:MaterialApp(theme:ThemeData(primaryColor:constColor(0xff746bc9),iconTheme:constIconThemeData(color:Colors.black),),debugShowCheckedModeBanner:false,home:StreamBuilder(stream:FirebaseAuth.instance.authStateChanges(),builder:(context,snapshot){if(snapshot.hasData){returnHomePage();}else{returnLogin();}},),
            login page => "class Login extends StatefulWidget {  @override  _LoginState createState() => _LoginState();}final GlobalKey<FormState> _formKey = GlobalKey<FormState>();bool isLoading = false;String p =r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';RegExp regExp = new RegExp(p);final TextEditingController email = TextEditingController();final TextEditingController userName = TextEditingController();final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();final TextEditingController password = TextEditingController();bool obserText = true;class _LoginState extends State<Login> {  void submit(context) async {try {  setState(() {isLoading = true;  });  UserCredential result = await FirebaseAuth.instance  .signInWithEmailAndPassword(  email: email.text, password: password.text);  print(result);} on PlatformException catch (error) {  var message = "Please Check Your Internet Connection ";  if (error.message != null) {message = error.message!;  }  _scaffoldKey.currentState?.showSnackBar(SnackBar(  content: Text(message.toString()),  duration: Duration(milliseconds: 800),  backgroundColor: Theme.of(context).primaryColor,),  );  setState(() {isLoading = false;  });} catch (error) {  setState(() {isLoading = false;  });  _scaffoldKey.currentState?.showSnackBar(SnackBar(content: Text(error.toString()),duration: Duration(milliseconds: 800),backgroundColor: Theme.of(context).primaryColor,  ));}setState(() {  isLoading = false;});  }  void vaildation() async {if (email.text.isEmpty && password.text.isEmpty) {  _scaffoldKey.currentState?.showSnackBar(SnackBar(  content: Text("Both Flied Are Empty"),),  );} else if (email.text.isEmpty) {  _scaffoldKey.currentState?.showSnackBar(SnackBar(  content: Text("Email Is Empty"),),  );} else if (!regExp.hasMatch(email.text)) {  _scaffoldKey.currentState?.showSnackBar(SnackBar(  content: Text("Please Try Vaild Email"),),  );} else if (password.text.isEmpty) {  _scaffoldKey.currentState?.showSnackBar(SnackBar(  content: Text("Password Is Empty"),),  );} else if (password.text.length < 8) {  _scaffoldKey.currentState?.showSnackBar(SnackBar(  content: Text("Password  Is Too Short"),),  );} else {  submit(context);}  }  Widget _buildAllPart() {return Expanded(  flex: 3,  child: Container(width: double.infinity,child: Column(  mainAxisAlignment: MainAxisAlignment.center,  children: [Column(  children: <Widget>[Text(  "Login",  style: TextStyle(fontSize: 40, fontWeight: FontWeight.bold),),SizedBox(  height: 10,),MyTextFormField(  name: "Email",  controller: email,),SizedBox(  height: 10,),PasswordTextFormField(  obserText: obserText,  name: "Password",  controller: password,  onTap: () {FocusScope.of(context).unfocus();setState(() {  obserText = !obserText;});  },),SizedBox(  height: 10,),isLoading == false? MyButton(onPressed: () {  vaildation();},name: "Login",  ): Center(child: CircularProgressIndicator(),  ),SizedBox(  height: 10,),ChangeScreen(name: "SignUp",whichAccount: "I Have Not Account!",onTap: () {  Navigator.of(context).pushReplacement(MaterialPageRoute(  builder: (ctx) => SignUp(),),  );}),  ],),  ],),  ),);  }  @override  Widget build(BuildContext context) {return Scaffold(  key: _scaffoldKey,  body: Form(key: _formKey,child: Container(  margin: EdgeInsets.symmetric(horizontal: 10),  child: Column(mainAxisAlignment: MainAxisAlignment.center,children: <Widget>[  _buildAllPart(),],  ),),  ),);  }}"
            SignUp page => "import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import '../widgets/changescreen.dart';import '../widgets/mybutton.dart';import '../widgets/mytextformField.dart';import '../widgets/passwordtextformfield.dart';import 'homepage.dart';import 'login.dart';class SignUp extends StatefulWidget {  @override  _SignUpState createState() => _SignUpState();}final GlobalKey<FormState> _formKey = GlobalKey<FormState>();final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();String p =r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';RegExp regExp = new RegExp(p);bool obserText = true;final TextEditingController email = TextEditingController();final TextEditingController userName = TextEditingController();final TextEditingController phoneNumber = TextEditingController();final TextEditingController password = TextEditingController();final TextEditingController address = TextEditingController();bool isMale = true;bool isLoading = false;class _SignUpState extends State<SignUp> {  void submit() async {UserCredential? result = null;try {  setState(() {isLoading = true;  });  result = await FirebaseAuth.instance.createUserWithEmailAndPassword(  email: email.text, password: password.text);  print(result);  FirebaseFirestore.instance.collection("User").doc(result.user!.uid).set({"UserName": userName.text,"UserId": result.user!.uid,"UserEmail": email.text,"UserAddress": address.text,"UserGender": isMale == true ? "Male" : "Female","UserNumber": phoneNumber.text,  });} on PlatformException catch (error) {  var message = "Please Check Your Internet Connection ";  if (error.message != null) {message = error.message!;  }  _scaffoldKey.currentState?.showSnackBar(SnackBar(content: Text(message.toString()),duration: const Duration(milliseconds: 600),backgroundColor: Theme.of(context).primaryColor,  ));  setState(() {isLoading = false;  });} catch (error) {  setState(() {isLoading = false;  });  _scaffoldKey.currentState?.showSnackBar(SnackBar(content: Text(error.toString()),duration: const Duration(milliseconds: 600),backgroundColor: Theme.of(context).primaryColor,  ));  print(error);}Navigator.of(context).pushReplacement(MaterialPageRoute(builder: (ctx) => HomePage()));setState(() {  isLoading = false;});  }  void vaildation() async {if (userName.text.isEmpty &&email.text.isEmpty &&password.text.isEmpty &&phoneNumber.text.isEmpty &&address.text.isEmpty) {  _scaffoldKey.currentState?.showSnackBar(const SnackBar(  content: Text("All Flied Are Empty"),),  );} else if (userName.text.length < 6) {  _scaffoldKey.currentState?.showSnackBar(const SnackBar(  content: const Text("Name Must Be 6 "),),  );} else if (email.text.isEmpty) {  _scaffoldKey.currentState?.showSnackBar(const SnackBar(  content: const Text("Email Is Empty"),),  );} else if (!regExp.hasMatch(email.text)) {  _scaffoldKey.currentState?.showSnackBar(const SnackBar(  content: Text("Please Try Vaild Email"),),  );} else if (password.text.isEmpty) {  _scaffoldKey.currentState?.showSnackBar(const SnackBar(  content: const Text("Password Is Empty"),),  );} else if (password.text.length < 8) {  _scaffoldKey.currentState?.showSnackBar(const SnackBar(  content: const Text("Password  Is Too Short"),),  );} else if (phoneNumber.text.length < 11 || phoneNumber.text.length > 11) {  _scaffoldKey.currentState?.showSnackBar(const SnackBar(  content: const Text("Phone Number Must Be 11 "),),  );} else if (address.text.isEmpty) {  _scaffoldKey.currentState?.showSnackBar(const SnackBar(  content: const Text("Adress Is Empty "),),  );} else {  submit();}  }  Widget _buildAllTextFormField() {return Container(  child: Column(mainAxisAlignment: MainAxisAlignment.spaceEvenly,children: <Widget>[  MyTextFormField(name: "UserName",controller: userName,  ),  const SizedBox(height: 10,  ),  MyTextFormField(name: "Email",controller: email,  ),  const SizedBox(height: 10,  ),  PasswordTextFormField(obserText: obserText,controller: password,name: "Password",onTap: () {  FocusScope.of(context).unfocus();  setState(() {obserText = !obserText;  });},  ),  const SizedBox(height: 10,  ),  GestureDetector(onTap: () {  setState(() {isMale = !isMale;  });},child: Container(  height: 60,  padding: const EdgeInsets.only(left: 10),  width: double.infinity,  decoration: BoxDecoration(border: Border.all(color: Colors.grey)),  child: Center(child: Row(  children: [Text(  isMale == true ? "Male" : "Female",  style:  const TextStyle(color: Colors.black87, fontSize: 18),),  ],),  ),),  ),  const SizedBox(height: 10,  ),  MyTextFormField(name: "Phone Number",controller: phoneNumber,  ),  const SizedBox(height: 10,  ),  MyTextFormField(name: "Address",controller: address,  ),],  ),);  }  Widget _buildBottomPart() {return Container(  margin: const EdgeInsets.symmetric(horizontal: 10),  width: double.infinity,  child: Column(mainAxisAlignment: MainAxisAlignment.spaceEvenly,children: <Widget>[  _buildAllTextFormField(),  const SizedBox(height: 10,  ),  isLoading == false  ? MyButton(  name: "SignUp",  onPressed: () {vaildation();  },)  : const Center(  child: CircularProgressIndicator(),),  ChangeScreen(name: "Login",whichAccount: "I Have Already An Account!",onTap: () {  Navigator.of(context).pushReplacement(MaterialPageRoute(  builder: (ctx) => Login(),),  );},  ),],  ),);  }  @override  Widget build(BuildContext context) {return Scaffold(  key: _scaffoldKey,  body: ListView(children: [  Container(height: 200,child: Column(  mainAxisAlignment: MainAxisAlignment.center,  children: const [Text(  "Register",  style: TextStyle(fontSize: 40,fontWeight: FontWeight.bold,  ),),  ],),  ),  Container(height: 500,child: _buildBottomPart(),  ),],  ),);  }}"
            add item to Firestore => " if (productProvider.getCheckOutModelList.isNotEmpty) {  FirebaseFirestore.instance.collection("Order").add({"Product": productProvider.getCheckOutModelList.map((c) => {  "ProductName": c.name,  "ProductPrice": c.price,  "ProductQuetity": c.quentity,  "ProductImage": c.image,  "Product Color": c.color,  "Product Size": c.size,}).toList(),"TotalPrice": total.toStringAsFixed(2),"UserName": e.userName,"UserEmail": e.userEmail,"UserNumber": e.userPhoneNumber,"UserAddress": e.userAddress,"UserId": user.uid,  });  setState(() {myList.clear();  });"
            add item to Firestore => "User? user = FirebaseAuth.instance.currentUser;  FirebaseFirestore.instance.collection("Message").doc(user?.uid).set({"Name": name,"Email": email,"Message": message.text,  });}" 
Hard    *** 6.[Provider]
            import 'package:provider/provider.dart'
            main => "return MultiProvider(  providers: [ChangeNotifierProvider<CategoryProvider>(  create: (context) => CategoryProvider(),),ChangeNotifierProvider<ProductProvider>(  create: (context) => ProductProvider(),),  ],  child: MaterialApp()"
            product provider page => "import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import '../model/cartmodel.dart';import '../model/product.dart';import '../model/usermodel.dart';class ProductProvider with ChangeNotifier {  List<Product> feature = [];  late Product featureData;  List<CartModel> checkOutModelList = [];  late CartModel checkOutModel;  List<UserModel> userModelList = [];  late UserModel userModel;  Future<void> getUserData() async {List<UserModel> newList = [];User? currentUser = FirebaseAuth.instance.currentUser;QuerySnapshot userSnapShot =await FirebaseFirestore.instance.collection("User").get();userSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;if (currentUser?.uid == elementData["UserId"]) {  userModel = UserModel(  userAddress: elementData["UserAddress"],  userImage: elementData["UserImage"],  userEmail: elementData["UserEmail"],  userGender: elementData["UserGender"],  userName: elementData["UserName"],  userPhoneNumber: elementData["UserNumber"]);  newList.add(userModel);}userModelList = newList;  },);  }  List<UserModel> get getUserModelList {return userModelList;  }  void deleteCheckoutProduct(int index) {checkOutModelList.removeAt(index);notifyListeners();  }  void clearCheckoutProduct() {checkOutModelList.clear();notifyListeners();  }  void getCheckOutData({required int quentity,required double price,required String name,required String color,required String size,required String image,  }) {checkOutModel = CartModel(  color: color,  size: size,  price: price,  name: name,  image: image,  quentity: quentity,);checkOutModelList.add(checkOutModel);  }  List<CartModel> get getCheckOutModelList {return List.from(checkOutModelList);  }  int get getCheckOutModelListLength {return checkOutModelList.length;  }  Future<void> getFeatureData() async {List<Product> newList = [];QuerySnapshot featureSnapShot = await FirebaseFirestore.instance.collection("products").doc("8NgGI6tXcwU0bT328lWR").collection("featureproduct").get();featureSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;double? x = double.tryParse(elementData["price"].toString()) ?? 0.0;featureData = Product(image: elementData["image"],name: elementData["name"],price: x /*double.parse(elementData["price"]),*/);newList.add(featureData);  },);feature = newList;  }  List<Product> get getFeatureList {return feature;  }  List<Product> homeFeature = [];  Future<void> getHomeFeatureData() async {List<Product> newList = [];QuerySnapshot featureSnapShot =await FirebaseFirestore.instance.collection("homefeature").get();featureSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;double? x = double.tryParse(elementData["price"].toString()) ?? 0.0;featureData = Product(image: elementData["image"],name: elementData["name"],price: x /*double.parse(elementData["price"]),*/);newList.add(featureData);  },);homeFeature = newList;notifyListeners();  }  List<Product> get getHomeFeatureList {return homeFeature;  }  List<Product> homeAchive = [];  Future<void> getHomeAchiveData() async {List<Product> newList = [];QuerySnapshot featureSnapShot =await FirebaseFirestore.instance.collection("homeachive").get();featureSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;double? x = double.tryParse(elementData["price"].toString()) ?? 0.0;featureData = Product(  image: elementData["image"],  name: elementData["name"],  price: x /*double.parse(elementData["price"]),*/,);newList.add(featureData);  },);homeAchive = newList;notifyListeners();  }  List<Product> get getHomeAchiveList {return homeAchive;  }  List<Product> newAchives = [];  late Product newAchivesData;  Future<void> getNewAchiveData() async {List<Product> newList = [];QuerySnapshot achivesSnapShot = await FirebaseFirestore.instance.collection("products").doc("8NgGI6tXcwU0bT328lWR").collection("newachives").get();achivesSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;double? x = double.tryParse(elementData["price"].toString()) ?? 0.0;newAchivesData = Product(image: elementData["image"],name: elementData["name"],price: x /*double.parse(elementData["price"]),*/);newList.add(newAchivesData);  },);newAchives = newList;notifyListeners();  }  List<Product> get getNewAchiesList {return newAchives;  }  List<String> notificationList = [];  void addNotification(String notification) {notificationList.add(notification);  }  int get getNotificationIndex {return notificationList.length;  }  get getNotificationList {return notificationList;  }  late List<Product> searchList;  void getSearchList({List<Product>? list}) {searchList = list!;  }  List<Product> searchProductList(String query) {List<Product> searchShirt = searchList.where((element) {  return element.name!.toUpperCase().contains(query) ||  element.name!.toLowerCase().contains(query);}).toList();return searchShirt;  }}"
            category provider => "import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import '../model/categoryicon.dart';import '../model/product.dart';class CategoryProvider with ChangeNotifier {  List<Product> shirt = [];  late Product shirtData;  List<Product> dress = [];  late Product dressData;  List<Product> shoes = [];  late Product shoesData;  List<Product> pant = [];  late Product pantData;  List<Product> tie = [];  late Product tieData;  List<CategoryIcon> dressIcon = [];  late CategoryIcon dressiconData;  Future<void> getDressIconData() async {List<CategoryIcon> newList = [];QuerySnapshot dressSnapShot = await FirebaseFirestore.instance.collection("categoryicon").doc("G12AjFtSAJw501wOA5wN").collection("dress").get();dressSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;dressiconData = CategoryIcon(image: elementData["image"]);newList.add(dressiconData);  },);dressIcon = newList;notifyListeners();  }  List<CategoryIcon> get getDressIcon {return dressIcon;  }  List<CategoryIcon> shirtIcon = [];  late CategoryIcon shirticonData;  Future<void> getShirtIcon() async {List<CategoryIcon> newList = [];QuerySnapshot shirtSnapShot = await FirebaseFirestore.instance.collection("categoryicon").doc("G12AjFtSAJw501wOA5wN").collection("shirt").get();shirtSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;shirticonData = CategoryIcon(image: elementData["image"]);newList.add(shirticonData);  },);shirtIcon = newList;notifyListeners();  }  List<CategoryIcon> get getShirtIconData {return shirtIcon;  }  List<CategoryIcon> shoesIcon = [];  late CategoryIcon shoesiconData;  Future<void> getshoesIconData() async {List<CategoryIcon> newList = [];QuerySnapshot shoesSnapShot = await FirebaseFirestore.instance.collection("categoryicon").doc("G12AjFtSAJw501wOA5wN").collection("shoes").get();shoesSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;shoesiconData = CategoryIcon(image: elementData["image"]);newList.add(shoesiconData);  },);shoesIcon = newList;notifyListeners();  }  List<CategoryIcon> get getShoeIcon {return shoesIcon;  }  List<CategoryIcon> pantIcon = [];  late CategoryIcon panticonData;  Future<void> getPantIconData() async {List<CategoryIcon> newList = [];QuerySnapshot pantSnapShot = await FirebaseFirestore.instance.collection("categoryicon").doc("G12AjFtSAJw501wOA5wN").collection("pant").get();pantSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;panticonData = CategoryIcon(image: elementData["image"]);newList.add(panticonData);  },);pantIcon = newList;notifyListeners();  }  List<CategoryIcon> get getPantIcon {return pantIcon;  }  List<CategoryIcon> tieIcon = [];  late CategoryIcon tieIconData;  Future<void> getTieIconData() async {List<CategoryIcon> newList = [];QuerySnapshot tieSnapShot = await FirebaseFirestore.instance.collection("categoryicon").doc("G12AjFtSAJw501wOA5wN").collection("tie").get();tieSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;tieIconData = CategoryIcon(image: elementData["image"]);newList.add(tieIconData);  },);tieIcon = newList;notifyListeners();  }  List<CategoryIcon> get getTieIcon {return tieIcon;  }  Future<void> getShirtData() async {List<Product> newList = [];QuerySnapshot shirtSnapShot = await FirebaseFirestore.instance.collection("category").doc("tYMdKmCYZFHEuAtM5ZLl").collection("shirt").get();shirtSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;shirtData = Product(image: elementData["image"],name: elementData["name"],price: elementData["price"]);newList.add(shirtData);  },);shirt = newList;notifyListeners();  }  List<Product> get getShirtList {return shirt;  }  Future<void> getDressData() async {List<Product> newList = [];QuerySnapshot shirtSnapShot = await FirebaseFirestore.instance.collection("category").doc("tYMdKmCYZFHEuAtM5ZLl").collection("dress").get();shirtSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;shirtData = Product(image: elementData["image"],name: elementData["name"],price: elementData["price"]);newList.add(shirtData);  },);dress = newList;notifyListeners();  }  List<Product> get getDressList {return dress;  }  Future<void> getShoesData() async {List<Product> newList = [];QuerySnapshot shirtSnapShot = await FirebaseFirestore.instance.collection("category").doc("tYMdKmCYZFHEuAtM5ZLl").collection("shoes").get();shirtSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;shirtData = Product(image: elementData["image"],name: elementData["name"],price: elementData["price"]);newList.add(shirtData);  },);shoes = newList;notifyListeners();  }  List<Product> get getshoesList {return shoes;  }  Future<void> getPantData() async {List<Product> newList = [];QuerySnapshot shirtSnapShot = await FirebaseFirestore.instance.collection("category").doc("tYMdKmCYZFHEuAtM5ZLl").collection("pant").get();shirtSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;shirtData = Product(image: elementData["image"],name: elementData["name"],price: elementData["price"]);newList.add(shirtData);  },);pant = newList;notifyListeners();  }  List<Product> get getPantList {return pant;  }  Future<void> getTieData() async {List<Product> newList = [];QuerySnapshot shirtSnapShot = await FirebaseFirestore.instance.collection("category").doc("tYMdKmCYZFHEuAtM5ZLl").collection("tie").get();shirtSnapShot.docs.forEach(  (element) {dynamic elementData = element.data()!;shirtData = Product(image: elementData["image"],name: elementData["name"],price: 20.0 /*double.parse(elementData["price"]),*/);newList.add(shirtData);  },);tie = newList;notifyListeners();  }  List<Product> get getTieList {return tie;  }  late List<Product> searchList;  void getSearchList({required List<Product> list}) {searchList = list;  }  List<Product> searchCategoryList(String query) {List<Product> searchShirt = searchList.where((element) {  return element.name!.toUpperCase().contains(query) ||  element.name!.toLowerCase().contains(query);}).toList();return searchShirt;  }}"
           home Page => "categoryProvider = Provider.of<CategoryProvider>(context); productProvider = Provider.of<ProductProvider>(context);getCallAllFunction();" 
            home page => "void getCallAllFunction() {categoryProvider.getShirtData();categoryProvider.getDressData();categoryProvider.getShoesData();categoryProvider.getPantData();categoryProvider.getTieData();categoryProvider.getDressIconData();productProvider.getNewAchiveData();productProvider.getFeatureData();productProvider.getHomeFeatureData();productProvider.getHomeAchiveData();categoryProvider.getShirtIcon();categoryProvider.getshoesIconData();categoryProvider.getPantIconData();categoryProvider.getTieIconData();productProvider.getUserData();  }"

Medium  **  7.[Snackbar]
            ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("replace the text with widget as you eed")));
Medium  *** 8.[DrawerNavigator]
            create scaffold key => final GlobalKey<ScaffoldState> _key = GlobalKey<ScaffoldState>();
            syntax => Scaffold(drawer: Drawer(child:widget(),)
            drawer exemple (method) => "Widget _buildMyDrawer() {List<UserModel> userModel = productProvider.userModelList;return Drawer(  child: ListView(children: [  Column(children: userModel.map((e) {  return UserAccountsDrawerHeader(accountName: Text(  e.userName!,  style: const TextStyle(color: Colors.black),),currentAccountPicture: CircleAvatar(  backgroundColor: Colors.white,  backgroundImage: e.userImage == null  ? const AssetImage("images/userImage.png")  as ImageProvider<Object>?  : NetworkImage(e.userImage!),),decoration: const BoxDecoration(color: Color(0xfff2f2f2)),accountEmail: Text(e.userEmail!,style: const TextStyle(color: Colors.black)),  );}).toList(),  ),  ListTile(selected: homeColor,onTap: () {  setState(() {homeColor = true;contactUsColor = false;checkoutColor = false;aboutColor = false;profileColor = false;  });},leading: Icon(Icons.home),title: Text("Home"),  ),  ListTile(selected: checkoutColor,onTap: () {  setState(() {checkoutColor = true;contactUsColor = false;homeColor = false;profileColor = false;aboutColor = false;  });  Navigator.of(context).pushReplacement(  MaterialPageRoute(builder: (ctx) => CheckOut()));},leading: Icon(Icons.shopping_cart),title: Text("Checkout"),  ),  ListTile(selected: aboutColor,onTap: () {  setState(() {aboutColor = true;contactUsColor = false;homeColor = false;profileColor = false;checkoutColor = false;  });  Navigator.of(context).pushReplacement(  MaterialPageRoute(builder: (ctx) => About()));},leading: Icon(Icons.info),title: Text("About"),  ),  ListTile(selected: profileColor,onTap: () {  setState(() {aboutColor = false;contactUsColor = false;homeColor = false;profileColor = true;checkoutColor = false;  });  Navigator.of(context).pushReplacement(MaterialPageRoute(  builder: (ctx) => ProfileScreen(),),  );},leading: Icon(Icons.info),title: Text("Profile"),  ),  ListTile(selected: contactUsColor,onTap: () {  setState(() {contactUsColor = true;checkoutColor = false;profileColor = false;homeColor = false;aboutColor = false;  });  Navigator.of(context).pushReplacement(  MaterialPageRoute(builder: (ctx) => ContactUs()));},leading: Icon(Icons.phone),title: Text("Contant Us"),  ),  ListTile(onTap: () {  FirebaseAuth.instance.signOut();},leading: Icon(Icons.exit_to_app),title: Text("Logout"),  ),],  ),);  }"
            to open it by press button => onPressed: () {_key.currentState!.openDrawer();}),
Medium  *** 9.[Dialog]
            => "Future<void> myDialogBox(context) {return showDialog<void>(context: context,barrierDismissible: false,builder: (BuildContext context) {  return AlertDialog(title: Text("Alert"),actions: [  FlatButton(child: Text("Clear Notification"),onPressed: () {  Navigator.of(context).pop();  setState(() {productProvider.notificationList.clear();  });},  ),  FlatButton(child: Text("Okey"),onPressed: () {  Navigator.of(context).pop();},  ),],content: SingleChildScrollView(  child: ListBody(children: [  Text(productProvider.notificationList.isNotEmpty  ? "Your Product On Way"  : "No Notification At Yet"),],  ),),  );});  }"
Easy    **  10.[Badge]
            => "Badge(  position: const BadgePosition(start: 25, top: 8),  badgeContent: Text(productProvider.getNotificationIndex.toString(),style:const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),  ),  badgeColor: Colors.red,  child: IconButton(icon: const Icon(  Icons.notifications_none,  color: Colors.black,),onPressed: () {  myDialogBox(context);},  ),);"
Easy    *** 11.[Orientation]
            => "final Orientation orientation = MediaQuery.of(context).orientation;"
Hard    *** 12.[Animation Controller]
            class should extend => "class _HomePageState extends State<HomePage>with SingleTickerProviderStateMixin {"
            twin controller => " late final AnimationController _controller = AnimationController(duration: const Duration(seconds: 3),vsync: this,)..repeat(reverse: true);late final Animation<Offset> _animation = Tween<Offset>(begin: Offset.zero,end: const Offset(1.6, 0.0),).animate(CurvedAnimation(parent: _controller,curve: Curves.fastOutSlowIn,),);"
            TweenAnimatedBuilder, exemple move widget from offset to another => "TweenAnimationBuilder( duration: Duration(milliseconds: 300), tween: Tween<Offset>(  begin: Offset(0, 0), end: Offset(_xOffset, 0.0)), builder:  (BuildContext context, Offset value, Widget? child) {return Transform.translate(  offset: value,  child: Container( color: Colors.amber, height: 2, width: 50,  ),); },  ),"
Medium  *** 13.[Theme]
            create folder theme contains theme_constant.dart and theme_manager.dart
            theme_constant.dart => "import 'package:flutter/material.dart';const COLOR_PRIMARY = Colors.deepOrangeAccent;const COLOR_ACCENT = Colors.orange;ThemeData lightTheme = ThemeData( brightness: Brightness.light, primaryColor: COLOR_PRIMARY, floatingActionButtonTheme:  FloatingActionButtonThemeData(backgroundColor: COLOR_ACCENT), elevatedButtonTheme: ElevatedButtonThemeData(  style: ButtonStyle(padding: MaterialStateProperty.all<EdgeInsetsGeometry>( EdgeInsets.symmetric(horizontal: 40.0, vertical: 20.0)),shape: MaterialStateProperty.all<OutlinedBorder>( RoundedRectangleBorder(  borderRadius: BorderRadius.circular(20.0))),backgroundColor: MaterialStateProperty.all<Color>(COLOR_ACCENT))), inputDecorationTheme: InputDecorationTheme(  border: OutlineInputBorder(borderRadius: BorderRadius.circular(20.0),borderSide: BorderSide.none),  filled: true,  fillColor: Colors.grey.withOpacity(0.1)));ThemeData darkTheme = ThemeData(  brightness: Brightness.dark,  accentColor: Colors.white,  switchTheme: SwitchThemeData( trackColor: MaterialStateProperty.all<Color>(Colors.grey), thumbColor: MaterialStateProperty.all<Color>(Colors.white),  ),  inputDecorationTheme: InputDecorationTheme(border: OutlineInputBorder( borderRadius: BorderRadius.circular(20.0), borderSide: BorderSide.none),filled: true,fillColor: Colors.grey.withOpacity(0.1)),  elevatedButtonTheme: ElevatedButtonThemeData(style: ButtonStyle( padding: MaterialStateProperty.all<EdgeInsetsGeometry>(  EdgeInsets.symmetric(horizontal: 40.0, vertical: 20.0)), shape: MaterialStateProperty.all<OutlinedBorder>(  RoundedRectangleBorder(borderRadius: BorderRadius.circular(20.0))), backgroundColor: MaterialStateProperty.all<Color>(Colors.white), foregroundColor: MaterialStateProperty.all<Color>(Colors.black), overlayColor: MaterialStateProperty.all<Color>(Colors.black26))),);"
            theme_manager.dart.dart => "import 'package:flutter/material.dart';class ThemeManager with ChangeNotifier {ThemeMode _themeMode = ThemeMode.dark; //default mode when app opened darkmode will be the one mentioned hereget themeMode => _themeMode;toggleTheme(bool isDark) {_themeMode = isDark ? ThemeMode.dark : ThemeMode.light;notifyListeners();}}"
            main => "import 'package:flutter/material.dart';import 'package:food_ui_app/theme/theme_constant.dart';import 'package:food_ui_app/theme/theme_manager.dart';import 'utils/helper_widget.dart';void main() {runApp(MyApp());}ThemeManager _themeManager = ThemeManager();class MyApp extends StatefulWidget {// This widget is the root of your application.@override_MyAppState createState() => _MyAppState();}class _MyAppState extends State<MyApp> {@overridevoid dispose() {_themeManager.removeListener(themeListener);super.dispose();}@overridevoid initState() {_themeManager.addListener(themeListener);super.initState();}themeListener() {if (mounted) {setState(() {});}}@overrideWidget build(BuildContext context) {return MaterialApp(debugShowCheckedModeBanner: false,title: 'Flutter Demo',theme: lightTheme,darkTheme: darkTheme,themeMode: _themeManager.themeMode,home: MyHomeScreen(),);}}class MyHomeScreen extends StatefulWidget {const MyHomeScreen({Key? key}) : super(key: key);@override_MyHomeScreenState createState() => _MyHomeScreenState();}class _MyHomeScreenState extends State<MyHomeScreen> {@overrideWidget build(BuildContext context) {TextTheme _textTheme = Theme.of(context).textTheme;bool isDark = Theme.of(context).brightness == Brightness.dark;return Scaffold(resizeToAvoidBottomInset: false,appBar: AppBar(title: Text("Theme App"),actions: [Switch(value: _themeManager.themeMode == ThemeMode.dark,onChanged: (newValue) {_themeManager.toggleTheme(newValue);})],),body: Center(child: Padding(padding: const EdgeInsets.all(8.0),child: Column(mainAxisAlignment: MainAxisAlignment.center,crossAxisAlignment: CrossAxisAlignment.center,children: [Image.network('https://pub-static.fotor.com/assets/projects/pages/d5bdd0513a0740a8a38752dbc32586d0/fotor-03d1a91a0cec4542927f53c87e0599f6.jpg',width: 200,height: 200,),addVerticalSpace(10),Text("Your Name",style: _textTheme.headline4?.copyWith(color: isDark ? Colors.white : Colors.black,fontWeight: FontWeight.bold),),addVerticalSpace(10),Text("@yourusername",style: _textTheme.subtitle1,),addVerticalSpace(10),Text("This is a simple Status",),addVerticalSpace(20),TextField(),addVerticalSpace(20),ElevatedButton(child: Text("Just Click"), onPressed: () {}),addVerticalSpace(20),ElevatedButton(child: Text("Click Me"), onPressed: () {}),],),),),floatingActionButton: Theme(data: Theme.of(context).copyWith(splashColor: Colors.blue), // For Testchild: FloatingActionButton(child: Icon(Icons.add),onPressed: () {},),),);}}"
Easy    **  14.[Hide Phone Bottom Bar and State Bar]
            choose one option from :
            add to initState => "SystemChrome.setEnabledSystemUIOverlays([SystemUiOverlay.top]);"
            add to initState => "SystemChrome.setEnabledSystemUIOverlays([SystemUiOverlay.top]);"
            add to initState => "SystemChrome.setEnabledSystemUIOverlays([]);"
Easy    *** 15.[Navigation]
            onPressed: () {  Navigator.push( context, MaterialPageRoute(builder: (context) => const SecondRoute()),  );}
            url:<https://docs.flutter.dev/cookbook/navigation/navigation-basics>
Easy    *** 16.[App Icon]
            install 
Easy    **  17.[Git Repo]
            git init
            git remote add origin git@github.com:Kaies00/notes_app.git
            git push --set-upstream origin master
Easy    *** 18.[Grid View]
            Expanded(child: GridView.builder(gridDelegate:const SliverGridDelegateWithMaxCrossAxisExtent(maxCrossAxisExtent: 200,childAspectRatio: 3 / 2,crossAxisSpacing: 20,mainAxisSpacing: 20),itemCount: _noteBooksPics.length,itemBuilder: (BuildContext ctx, index) {return Container(alignment: Alignment.center,decoration: BoxDecoration(color: Colors.amber,borderRadius: BorderRadius.circular(15)),child: Image(image: AssetImage(_noteBooksPics[index]),),);}),),
Easy    **  19.[Bottom Sheet]
            selectPicture(ctx) { return showModalBottomSheet(  shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(10.0),  ),  enableDrag: true,  context: ctx,  builder: (ctx) { return Padding(padding: const EdgeInsets.all(10.0),child: Expanded(  child: GridView.builder(gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent( maxCrossAxisExtent: 200, childAspectRatio: 3 / 2, crossAxisSpacing: 20, mainAxisSpacing: 20),itemCount: _noteBooksPics.length,itemBuilder: (BuildContext ctx, index) {  return Container( alignment: Alignment.center, decoration: BoxDecoration(  image: DecorationImage(image: AssetImage(_noteBooksPics[index])),  color: Colors.amber,  borderRadius: BorderRadius.circular(15)), // child: Image( //image: AssetImage(_noteBooksPics[index]), // ),  );}),), );  });  }
Hard    *   20.[BrainTree Payment]
            url<https://pub.dev/packages/flutter_braintree>





